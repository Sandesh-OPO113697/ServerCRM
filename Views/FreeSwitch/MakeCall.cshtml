@{
    ViewData["Title"] = "FreeSWITCH Call Control";
    // Pass login and dn from controller
    var loginCode = ViewBag.LoginCode as string ?? "";
    var dn = ViewBag.DN as string ?? "";
}

<h2>FreeSWITCH Call Control</h2>

<div>
    <strong>Agent:</strong> @loginCode &nbsp; <strong>CallerID (DN):</strong> @dn
</div>

@if (ViewBag.Message != null)
{
    <div class="alert alert-info mt-2">@ViewBag.Message</div>
}

<div class="card mb-3 p-3">
    <h4>Make a Call</h4>
    <form id="makeCallForm" asp-action="onCall" method="post">
        <div class="form-group mb-2">
            <input type="text" name="phoneNumber" class="form-control" placeholder="Phone Number" required />
        </div>
        <button type="submit" class="btn btn-primary mt-1">Call</button>
    </form>
</div>

<div class="card mb-3 p-3">
    <h4>Active Calls</h4>
    <table class="table table-bordered" id="activeCallsTable">
        <thead>
            <tr>
                <th>UUID</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<div class="card mb-3 p-3">
    <h4>Conference</h4>
    <input type="text" id="conferenceName" class="form-control mb-2" placeholder="Conference Name" />
    <input type="text" id="conferenceNumber" class="form-control mb-2" placeholder="Number to add" />
    <button class="btn btn-success mt-1" onclick="addNumberToConference()">Add Number</button>
</div>

<div class="card p-3" style="background-color:#f0f0f0;">
    <h4>Call Events</h4>
    <div id="currentEvent" style="background-color:#fff; padding:10px; border-radius:4px; font-weight:bold;">
        Waiting for call events...
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.9/signalr.min.js"></script>

<script>
    const loginCode = "@loginCode";
    const dn = "@dn";

    let activeCalls = {};

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/callEventsHub?userId=" + encodeURIComponent(loginCode))
        .withAutomaticReconnect()
        .build();

    connection.on("OnFsEvent", function(eventObj) {
        console.log("FS Event:", eventObj);

        let uuid = eventObj.uuid;
        let status = eventObj.status;

        if (!uuid || status === "Unknown") {
            console.log("Skipping invalid FS event");
            return;
        }

        document.getElementById("currentEvent").textContent = `UUID: ${uuid} - Status: ${status}`;

        if (status === "Disconnected") {
            delete activeCalls[uuid];
        } else {
            activeCalls[uuid] = eventObj;
        }

        renderActiveCallsTable();
    });

    connection.start()
        .then(() => console.log("SignalR connected for user:", loginCode))
        .catch(err => console.error("SignalR connection error:", err));

    function renderActiveCallsTable() {
        let tbody = document.querySelector("#activeCallsTable tbody");
        tbody.innerHTML = '';

        for (const uuid in activeCalls) {
            const call = activeCalls[uuid];
            let row = document.createElement("tr");
            row.id = `row-${call.uuid}`;
            row.innerHTML = `
                <td>${call.uuid}</td>
                <td>${call.status}</td>
                <td>
                    <button class="btn btn-sm btn-warning" onclick="holdCall('${call.uuid}')" ${call.status !== 'Talking' ? 'disabled' : ''}>Hold</button>
                    <button class="btn btn-sm btn-info" onclick="unholdCall('${call.uuid}')" ${call.status !== 'On Hold' ? 'disabled' : ''}>Unhold</button>
                    <button class="btn btn-sm btn-danger" onclick="hangupCall('${call.uuid}')" ${call.status === 'Disconnected' ? 'disabled' : ''}>Hangup</button>
                </td>`;
            tbody.appendChild(row);
        }
    }

    async function holdCall(uuid) {
        await sendPostJson("/FreeSwitch/HoldCall", { uuid: uuid });
    }

    async function unholdCall(uuid) {
        await sendPostJson("/FreeSwitch/UnholdCall", { uuid: uuid });
    }

    async function hangupCall(uuid) {
        let resp = await sendPostJson("/FreeSwitch/HangupCall", { uuid: uuid });
        if (!resp.ok) {
            alert("Failed to hang up call. It may have already ended.");
        }
    }

    async function addNumberToConference() {
        let confName = document.getElementById("conferenceName").value;
        let number = document.getElementById("conferenceNumber").value;
        if (!confName || !number) {
            alert("Conference name and number required");
            return;
        }
        await sendPostJson("/FreeSwitch/AddNumberToConference", { conferenceName: confName, phoneNumber: number });
    }

    async function sendPostJson(url, dataObj) {
        try {
            let resp = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(dataObj)
            });
            if (!resp.ok) {
                const errorText = await resp.text();
                console.error("Error from server:", errorText);
            }
            return resp;
        } catch (err) {
            console.error("Network error:", err);
            return { ok: false };
        }
    }
</script>