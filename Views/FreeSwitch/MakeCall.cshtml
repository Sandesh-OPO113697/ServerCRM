@{
    ViewData["Title"] = "FreeSWITCH Call Control";
    var loginCode = ViewBag.LoginCode as string ?? "";
    var dn = ViewBag.DN as string ?? "";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <title>@ViewData["Title"]</title>
    <style>
        .navbar-text {
            color: rgba(255,255,255,0.75);
            margin-right: 1rem;
        }

        .status-bar {
            padding: 10px;
            background-color: #e9ecef;
            border-bottom: 1px solid #dee2e6;
            font-size: 1.1rem;
        }

        .call-actions {
            margin-top: 20px;
        }

        .call-status {
            font-weight: bold;
            margin-right: 10px;
        }

        .icon-btn {
            font-size: 1.5rem;
            margin-right: 5px;
        }
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#"><i class="fas fa-headset me-2"></i> FreeSWITCH Call Control</a>
            <div class="navbar-text">
                <strong>Agent:</strong> @loginCode &nbsp;
                <strong>CallerID:</strong> @dn
            </div>
        </div>
    </nav>

    <div class="container mt-3">
        <div class="status-bar d-flex align-items-center">
            <strong>Status:</strong>
            <button class="btn btn-success btn-sm ms-2" onclick="setAgentStatus('Ready')">
                <i class="fas fa-check-circle"></i> Ready
            </button>
            <button class="btn btn-warning btn-sm ms-2" onclick="setAgentStatus('NotReady')">
                <i class="fas fa-exclamation-circle"></i> Not Ready
            </button>
            <button class="btn btn-danger btn-sm ms-2" onclick="setAgentStatus('Break')">
                <i class="fas fa-mug-hot"></i> Break
            </button>
        </div>

        <div class="call-actions mt-3">
            <span class="call-status" id="callStatus">No active call</span>
            <button class="btn btn-warning btn-sm" id="btnHold"  title="Hold">
                <i class="fas fa-pause"></i> Hold
            </button>
            <button class="btn btn-info btn-sm" id="btnUnhold"  title="Unhold">
                <i class="fas fa-play"></i> Unhold
            </button>
            <button class="btn btn-danger btn-sm" id="btnHangup"  title="Hangup">
                <i class="fas fa-times"></i> Hangup
            </button>
        </div>

        <div class="mt-3">
            <form id="makeCallForm" asp-action="onCall" method="post" class="d-flex">
                <input type="text" name="phoneNumber" class="form-control form-control-sm me-2" placeholder="Phone Number" required />
                <button type="submit" class="btn btn-primary"><i class="fas fa-phone"></i> Call</button>
            </form>
        </div>
    </div>
  
    <audio id="localAudio" autoplay muted ></audio>
    <audio id="remoteAudio" autoplay></audio>

    <script src="~/js/signalr.min.js"></script>
    <script src="~/js/jssip.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script>
            const loginCode = "@loginCode";
               let currentCallStatus = "";
        let previousCallStatus = "";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/callEventsHub?userId=" + encodeURIComponent(loginCode))
            .withAutomaticReconnect()
            .build();

                   connection.on("OnFsEvent", function (eventObj) {
            console.log("FS Event:", eventObj);

            if (eventObj.status && eventObj.status !== "") {
                previousCallStatus = currentCallStatus;
                currentCallStatus = eventObj.status;
            }

            const displayStatus = currentCallStatus !== "" ? currentCallStatus : previousCallStatus;

            document.getElementById("callStatus").textContent = `Call Status: ${displayStatus}`;
        });

        connection.start()
            .then(() => console.log("SignalR connected"))
            .catch(err => console.error(err.toString()));

        async function sendPostJson(url) {
            try {
                const resp = await fetch(url, { method: "POST" });
                if (!resp.ok) throw new Error("Request failed");
                return true;
            } catch (err) {
                console.error(err);
                return false;
            }
        }
                document.getElementById("btnHold").addEventListener("click", async () => {
            await sendPostJson("/FreeSwitch/HoldCall");
        });
        document.getElementById("btnUnhold").addEventListener("click", async () => {
            await sendPostJson("/FreeSwitch/UnholdCall");
        });
        document.getElementById("btnHangup").addEventListener("click", async () => {
            await sendPostJson("/FreeSwitch/HangupCall");
        });

        async function addNumberToConference() {
            let confName = document.getElementById("conferenceName").value;
            let number = document.getElementById("conferenceNumber").value;
            if (!confName || !number) { alert("Conference name and number required"); return; }
            await sendPostJson("/FreeSwitch/AddNumberToConference", { conferenceName: confName, phoneNumber: number });
        }
        async function mergeToConference(uuid) {
            const conferenceName = prompt("Enter the name of the conference to join:");
            if (!conferenceName) return;
            await sendPostJson("/FreeSwitch/MergeToConference", { callUuid: uuid, conferenceName });
        }
        async function removeFromConference(uuid) {
            const conferenceName = prompt("Enter the name of the conference to remove from:");
            if (!conferenceName) return;
            await sendPostJson("/FreeSwitch/RemoveFromConference", { conferenceName, callUuid: uuid });
        }
           async function setAgentStatus(status) {
            try {
                await fetch("/FreeSwitch/SetAgentStatus", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ status })
                });
                alert(`Status changed to ${status}`);
            } catch (err) { console.error(err); }
        }

      
        let userAgent = null;
        let session = null;

        async function initSoftphone(config) {

            console.log(JSON.stringify(config));

            if (userAgent) {
                console.log("JsSIP already initialized, skipping.");
                return;
            }

                     try {
                                          
                            let localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                            const localAudio = document.getElementById('localAudio');
                            localAudio.srcObject = localStream;
                          
                            let wsUri = "ws://" + config.sipserver + "/ws";
                            const socket = new JsSIP.WebSocketInterface(wsUri);
                            const configuration = {
                                sockets: [socket],
                                uri: "sip:" + config.username + "@@" + config.sipserver,  
                                password: config.password,
                            };
                       
                            userAgent = new JsSIP.UA(configuration);
                            userAgent.on('connected', () => console.log("Connected to SIP server"));
                            userAgent.on('disconnected', () => console.log("Disconnected from SIP server"));
                            userAgent.on('registered', () => console.log("Registered as", config.username));
                            userAgent.on('unregistered', () => console.log("Unregistered"));
                            userAgent.on('registrationFailed', e => console.error("Registration failed", e));

                         
                            userAgent.on('newRTCSession', e => {
                                session = e.session;

                                          $('#btnAnswer').click(function () {
                                          
                                            if (session && session.direction === 'incoming') {
                                              session.answer({
                                                mediaConstraints: { audio: true, video: false }
                                              });
                                            
                                            } else {
                                              console.warn(" No incoming call to answer");
                                            }
                                          });

                                if (session.direction === 'incoming') {
                                    document.getElementById("currentEvent").textContent ="Incoming call from " + session.remote_identity.uri.toString();
                                    session.on('peerconnection', e => {
                                        const pc = e.peerconnection;
                                        pc.ontrack = ev => {
                                         
                                            if (ev.streams && ev.streams[0]) {
                                                document.getElementById("remoteAudio").srcObject = ev.streams[0];
                                            }
                                        };
                                    });

                                    session.on('ended', () => console.log(" Call ended"));
                                    session.on('failed', e => console.error(" Call failed", e));
                                    session.on('confirmed', () => console.log(" Call answered"));
                                }
  
                                if (session.direction === 'outgoing') {
                                    if (localStream) {
                                        localStream.getTracks().forEach(track => {
                                            session.connection.addTrack(track, localStream);
                                        });
                                    }
                                }
                            });
                            userAgent.start();

                            refreshFsStatus();
                                  




            } catch (err) {
                console.error("Softphone init failed", err);
            }
        }
        
        $(document).ready(function () {
            const sipConfig = JSON.parse(sessionStorage.getItem("sipConfig"));

            if (sipConfig) {
                console.log("Reusing SIP config from sessionStorage");
                initSoftphone(sipConfig);
            } else {
                $.get("/LogIn/GetSipConfig", function (res) {
                    console.log("Loaded SIP config:", res);
                    sessionStorage.setItem("sipConfig", JSON.stringify(res));
                    initSoftphone(res);
                }).fail(err => console.error("Failed to fetch SIP config", err));
            }
        });

          async function refreshFsStatus() {
                                    const response = await fetch('/FreeSwitch/Status');
                                    const data = await response.json();

                                }
    </script>
</body>
</html>
