@{
    ViewData["Title"] = "FreeSWITCH Call Control";
    var loginCode = ViewBag.LoginCode as string ?? "";
    var dn = ViewBag.DN as string ?? "";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <title>@ViewData["Title"]</title>
    <style>
        .navbar-text {
            color: rgba(255, 255, 255, 0.75);
            margin-right: 1rem;
        }
        .icon-btn {
            font-size: 1.5rem;
            color: white;
            padding: 0.5rem;
        }
        .icon-btn:hover {
            color: #ccc;
        }
        .status-bar {
            padding: 10px;
            background-color: #e9ecef;
            border-bottom: 1px solid #dee2e6;
            font-size: 1.1rem;
        }
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-headset me-2"></i> FreeSWITCH Call Control
            </a>
            <div class="navbar-text">
                <strong>Agent:</strong> @loginCode &nbsp;
                <strong>CallerID:</strong> @dn
            </div>
            <button id="btnAnswer">Answer</button>
            <div class="d-flex ms-auto align-items-center">
                <form id="makeCallForm" asp-action="onCall" method="post" class="d-flex me-2">
                    <input type="text" name="phoneNumber" class="form-control form-control-sm me-2" placeholder="Phone Number" required />
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-phone"></i>
                    </button>
                </form>

                <div class="d-flex me-2">
                    <input type="text" id="conferenceName" class="form-control form-control-sm me-2" placeholder="Conference Name" />
                    <input type="text" id="conferenceNumber" class="form-control form-control-sm me-2" placeholder="Number to add" />
                    <button class="btn btn-success" onclick="addNumberToConference()">
                        <i class="fas fa-user-plus"></i>
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <div class="status-bar d-flex justify-content-center align-items-center mb-3">
        <strong>Status:</strong>
        <button class="btn btn-success btn-sm ms-2" onclick="setAgentStatus('Ready')">`
            <i class="fas fa-check-circle"></i> Ready
        </button>
        <button class="btn btn-warning btn-sm ms-2" onclick="setAgentStatus('NotReady')">
            <i class="fas fa-exclamation-circle"></i> Not Ready
        </button>
        <button class="btn btn-danger btn-sm ms-2" onclick="setAgentStatus('Break')">
            <i class="fas fa-mug-hot"></i> Break
        </button>
    </div>

    @if (ViewBag.Message != null)
    {
        <div class="alert alert-info mt-2">@ViewBag.Message</div>
    }

    <div class="container">
        <div class="card mb-3 p-3">
            <h4>Active Calls</h4>
            <table class="table table-bordered" id="activeCallsTable">
                <thead>
                    <tr>
                        <th>UUID</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div class="card p-3" style="background-color:#f0f0f0;">
            <h4>Call Events</h4>
            <div id="currentEvent" style="background-color:#fff; padding:10px; border-radius:4px; font-weight:bold;">
                Waiting for call events...
            </div>
        </div>
    </div>

  
    <audio id="localAudio" autoplay muted ></audio>
    <audio id="remoteAudio" autoplay></audio>

    <script src="~/js/signalr.min.js"></script>
    <script src="~/js/jssip.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script>
        const loginCode = "@loginCode";
        const dn = "@dn";
        let activeCalls = {};
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/callEventsHub?userId=" + encodeURIComponent(loginCode))
            .withAutomaticReconnect()
            .build();

        connection.on("OnFsEvent", function (eventObj) {
            console.log("FS Event:", eventObj);

            let uuid = eventObj.uuid;
            let status = eventObj.status;

            if (!uuid || status === "Unknown") return;

            document.getElementById("currentEvent").textContent = `UUID: ${uuid} - Status: ${status}`;

            if (status === "Disconnected") {
                delete activeCalls[uuid];
            } else {
                activeCalls[uuid] = eventObj;
            }

            renderActiveCallsTable();
        });

        connection.start()
            .then(() => console.log(" SignalR connected for user:", loginCode))
            .catch(err => console.error(" SignalR connection error:", err));

        function renderActiveCallsTable() {
            let tbody = document.querySelector("#activeCallsTable tbody");
            tbody.innerHTML = '';

            for (const uuid in activeCalls) {
                const call = activeCalls[uuid];
                let row = document.createElement("tr");
                row.id = `row-${call.uuid}`;
                row.innerHTML = `
                    <td>${call.uuid}</td>
                    <td>${call.status}</td>
                    <td>
                        <button class="btn btn-sm btn-warning" onclick="holdCall('${call.uuid}')" ${call.status !== 'Talking' ? 'disabled' : ''} title="Hold">
                            <i class="fas fa-pause"></i>
                        </button>
                        <button class="btn btn-sm btn-info" onclick="unholdCall('${call.uuid}')" ${call.status !== 'On Hold' ? 'disabled' : ''} title="Unhold">
                            <i class="fas fa-play"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="hangupCall('${call.uuid}')" ${call.status === 'Disconnected' ? 'disabled' : ''} title="Hangup">
                            <i class="fas fa-times"></i>
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="mergeToConference('${call.uuid}')" ${call.status !== 'Talking' ? 'disabled' : ''} title="Merge to Conference">
                            <i class="fas fa-users-cog"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="removeFromConference('${call.uuid}')" title="Remove from Conference">
                            <i class="fas fa-user-minus"></i>
                        </button>
                    </td>`;
                tbody.appendChild(row);
            }
        }

        async function sendPostJson(url, dataObj) {
            try {
                let resp = await fetch(url, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(dataObj)
                });
                return resp;
            } catch (err) {
                console.error("Network error:", err);
                return { ok: false };
            }
        }

        async function holdCall(uuid) { await sendPostJson("/FreeSwitch/HoldCall", { uuid }); }
        async function unholdCall(uuid) { await sendPostJson("/FreeSwitch/UnholdCall", { uuid }); }
        async function hangupCall(uuid) { await sendPostJson("/FreeSwitch/HangupCall", { uuid }); }
        async function addNumberToConference() {
            let confName = document.getElementById("conferenceName").value;
            let number = document.getElementById("conferenceNumber").value;
            if (!confName || !number) { alert("Conference name and number required"); return; }
            await sendPostJson("/FreeSwitch/AddNumberToConference", { conferenceName: confName, phoneNumber: number });
        }
        async function mergeToConference(uuid) {
            const conferenceName = prompt("Enter the name of the conference to join:");
            if (!conferenceName) return;
            await sendPostJson("/FreeSwitch/MergeToConference", { callUuid: uuid, conferenceName });
        }
        async function removeFromConference(uuid) {
            const conferenceName = prompt("Enter the name of the conference to remove from:");
            if (!conferenceName) return;
            await sendPostJson("/FreeSwitch/RemoveFromConference", { conferenceName, callUuid: uuid });
        }
        async function setAgentStatus(status) {
            let resp = await sendPostJson("/FreeSwitch/SetAgentStatus", { status });
            if (resp.ok) alert(`Status changed to ${status}.`);
        }

      
        let userAgent = null;
        let session = null;

        async function initSoftphone(config) {

            console.log(JSON.stringify(config));

            if (userAgent) {
                console.log("JsSIP already initialized, skipping.");
                return;
            }

                     try {
                                          
                            let localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                            const localAudio = document.getElementById('localAudio');
                            localAudio.srcObject = localStream;
                          
                            let wsUri = "ws://" + config.sipserver + "/ws";
                            const socket = new JsSIP.WebSocketInterface(wsUri);
                            const configuration = {
                                sockets: [socket],
                                uri: "sip:" + config.username + "@@" + config.sipserver,  
                                password: config.password,
                            };
                       
                            userAgent = new JsSIP.UA(configuration);
                            userAgent.on('connected', () => console.log("Connected to SIP server"));
                            userAgent.on('disconnected', () => console.log("Disconnected from SIP server"));
                            userAgent.on('registered', () => console.log("Registered as", config.username));
                            userAgent.on('unregistered', () => console.log("Unregistered"));
                            userAgent.on('registrationFailed', e => console.error("Registration failed", e));

                         
                            userAgent.on('newRTCSession', e => {
                                session = e.session;

                                          $('#btnAnswer').click(function () {
                                            console.log("👉 Answer clicked");
                                            if (session && session.direction === 'incoming') {
                                              session.answer({
                                                mediaConstraints: { audio: true, video: false }
                                              });
                                            
                                            } else {
                                              console.warn(" No incoming call to answer");
                                            }
                                          });

                                if (session.direction === 'incoming') {
                                    document.getElementById("currentEvent").textContent ="Incoming call from " + session.remote_identity.uri.toString();
                                    session.on('peerconnection', e => {
                                        const pc = e.peerconnection;
                                        pc.ontrack = ev => {
                                         
                                            if (ev.streams && ev.streams[0]) {
                                                document.getElementById("remoteAudio").srcObject = ev.streams[0];
                                            }
                                        };
                                    });

                                    session.on('ended', () => console.log(" Call ended"));
                                    session.on('failed', e => console.error(" Call failed", e));
                                    session.on('confirmed', () => console.log(" Call answered"));
                                }
  
                                if (session.direction === 'outgoing') {
                                    if (localStream) {
                                        localStream.getTracks().forEach(track => {
                                            session.connection.addTrack(track, localStream);
                                        });
                                    }
                                }
                            });
                            userAgent.start();

                            refreshFsStatus();
                                  




            } catch (err) {
                console.error("Softphone init failed", err);
            }
        }
        
        $(document).ready(function () {
            const sipConfig = JSON.parse(sessionStorage.getItem("sipConfig"));

            if (sipConfig) {
                console.log("Reusing SIP config from sessionStorage");
                initSoftphone(sipConfig);
            } else {
                $.get("/LogIn/GetSipConfig", function (res) {
                    console.log("Loaded SIP config:", res);
                    sessionStorage.setItem("sipConfig", JSON.stringify(res));
                    initSoftphone(res);
                }).fail(err => console.error("Failed to fetch SIP config", err));
            }
        });

          async function refreshFsStatus() {
                                    const response = await fetch('/FreeSwitch/Status');
                                    const data = await response.json();

                                }
    </script>
</body>
</html>
